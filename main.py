from fastapi import *
from typing import Annotated
from fastapi.openapi.utils import get_openapi
import uvicorn
from pydantic import BaseModel
from sqlalchemy import *
from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker, AsyncSession
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column

#// –õ–∏—Å—Ç —Ç–µ–≥–æ–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
tag_list = [
    "–ì—Ä–∞–∂–¥–∞–Ω–µ ü§µ",
    "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö üóÉÔ∏è",
    "Root"
]

#// –î–≤–∏–∂–æ–∫ –¥–ª—è –ë–î
engine = create_async_engine('sqlite+aiosqlite:///eclipseid.db')
new_session = async_sessionmaker(engine, expire_on_commit=False)

#// –°–µ—Å—Å–∏—è –≤ –ë–î
async def get_session():
    async with new_session() as session:
        yield session

SessionDep = Annotated[AsyncSession, Depends(get_session)]
class Base(DeclarativeBase):
    pass

#// –ë–î
class EclipseID(Base):
    __tablename__ = "citizens"

    id: Mapped[int] = mapped_column(primary_key=True)
    nickname: Mapped[str] = mapped_column(unique=True)
    dsc_id: Mapped[int] = mapped_column(unique=True)
    role: Mapped[str]
    passport: Mapped[str] = mapped_column(unique=True)

#// –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ê–ü–ò
app = FastAPI()

#* –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –ë–î
@app.post('/setup_db', tags=[tag_list[1]], summary="–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –ë–î")
async def setup_database():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.drop_all)
        await conn.run_sync(Base.metadata.create_all)
    return {"status": True, "message": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–∞!"}

#. 0 —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.get("/", tags=[tag_list[2]])
async def main_page():
    return "EclipseID API v0.0.1"

#. –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä–∞–∂–¥–∞–Ω
@app.get("/citizens", tags=[tag_list[0]], summary="–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π —Å–ø–∏—Å–æ–∫ –≥—Ä–∞–∂–¥–∞–Ω")
async def get_citizens(session: SessionDep):
    query = select(EclipseID)
    result = await session.execute(query)
    return result.scalars().all()

#. –ü–æ–ª—É—á–∏—Ç—å –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É
@app.get("/citizens/nickname/{nickname}", tags=[tag_list[0]], summary="–ü–æ–ª—É—á–∏—Ç—å –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É")
async def get_citizens(session: SessionDep, nickname: str):
    query = select(EclipseID).where(EclipseID.nickname == nickname)
    result = await session.execute(query)
    return result.scalars().all()

#. –ü–æ–ª—É—á–∏—Ç—å –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ –ø–æ Discord ID
@app.get("/citizens/dsc_id/{dsc_id}", tags=[tag_list[0]], summary="–ü–æ–ª—É—á–∏—Ç—å –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ –ø–æ Discord ID")
async def get_citizens(session: SessionDep, dsc_id: int):
    query = select(EclipseID).where(EclipseID.dsc_id == dsc_id)
    result = await session.execute(query)
    return result.scalars().all()

#. –ü–æ–ª—É—á–∏—Ç—å –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ –ø–æ –ø–∞—Å–ø–æ—Ä—Ç—É
@app.get("/citizens/passport/{passport}", tags=[tag_list[0]], summary="–ü–æ–ª—É—á–∏—Ç—å –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ –ø–æ –ø–∞—Å–ø–æ—Ä—Ç—É")
async def get_citizens(session: SessionDep, passport: str):
    query = select(EclipseID).where(EclipseID.passport == passport)
    result = await session.execute(query)
    return result.scalars().all()

#// –ü–∞–π–¥–µ–Ω—Ç–∏–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞
class NewCitizen(BaseModel):
    nickname: str
    dsc_id: int
    role: str
    passport: str
class NewCitizenSchema(NewCitizen):
    id: int

#* –î–æ–±–∞–≤—Ç—å –Ω–æ–≤–æ–≥–æ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞
@app.post("/citizens", tags=[tag_list[0]], summary="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞")
async def add_citizen(new_citizen: NewCitizen, session: SessionDep):
    added_citizen = EclipseID(
        nickname=new_citizen.nickname,
        dsc_id=new_citizen.dsc_id,
        role=new_citizen.role,
        passport= new_citizen.passport
    )
    session.add(added_citizen)
    await session.commit()
    return {"status": True, "message": "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –≤–Ω–µ—Å—ë–Ω –≤ —Ä–µ–µ—Å—Ç—Ä!"}


#? –ö–∞—Å—Ç–æ–º–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema
    openapi_schema = get_openapi(
        title="ECLIPSEID API",
        version="0.0.1",
        description="–î–æ–∫—É–º–µ–Ω–∞—Ü–∏—è –ø–æ **API –≠–∫–æ—Å–∏—Å—Ç–µ–º—ã ECLIPSEID**",
        routes=app.routes,
    )
    app.openapi_schema = openapi_schema
    return app.openapi_schema
app.openapi = custom_openapi


# #// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ê–ü–ò
# if __name__ == "__main__":
#     uvicorn.run("main:app", reload=True, port=1000, host="0.0.0.0")

#// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ê–ü–ò
if __name__ == "__main__":
    uvicorn.run("main:app", reload=True)